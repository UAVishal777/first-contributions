Step 1: Sign into GitHub
      Sign into your GitHub account, or create a free GitHub account if you don't have one.
Step 2: Fork the project repository
      Find the project's repository on GitHub, and then "fork" it by clicking the Fork button in the upper right corner:
      This creates a copy of the project repository in your GitHub account. 
      In the upper left corner, you will see that you are now looking at a repository in your account:
Step 3: Clone your fork
      While still in your repository, click the green Clone or download button and then copy the HTTPS URL:
      Using Git on your local machine, clone your fork using the URL you just copied: git clone URL_OF_FORK.
      For example, I used git clone https://github.com/justmarkham/scikit-learn.git.
      Cloning copies the repository files (and commit history) from GitHub to your local machine. 
      The repository will be downloaded into a subdirectory of your working directory, 
      and the subdirectory will have the same name as the repository.
Step 4: Navigate to your local repository
      Since the clone was downloaded into a subdirectory of your working directory, you can navigate to it using: cd NAME_OF_REPOSITORY.
      For example, I used cd scikit-learn.
Step 5: Check that your fork is the "origin" remote
     you are going to be synchronizing your local repository with both the project repository (on GitHub) and your fork (also on GitHub). 
     The URLs that point to these repositories are called "remotes". More specifically, 
     the project repository is called the "upstream" remote, and your fork is called the "origin" remote.
     When you clonedyour fork, that should have automatically set your fork as the "origin" remote.
     Use git remote -v to show your current remotes. You should see the URL of your fork (which you copied in step 3) next to the word "origin".
     If you don't see an "origin" remote, you can add it using: git remote add origin URL_OF_FORK.
     
Step 6: Add the project repository as the "upstream" remote
     Go to your fork on GitHub, and click the "forked from" link to return to the project repository:
     While in the project repository, click the green Clone or download button and then copy the HTTPS URL:
     Add the project repository as the "upstream" remote using: git remote add upstream URL_OF_PROJECT.
     For example, I used git remote add upstream https://github.com/scikit-learn/scikit-learn.git.
     Use git remote -v to check that you now have two remotes: an origin that points to your fork,
     and an upstream that points to the project repository.
Step 7: Pull the latest changes from upstream into your local repository
     Before you start making any changes to your local files, it's a good practice to first synchronize your local repository with the project repository.
     Use git pull upstream master to "pull" any changes from the "master" branch of the "upstream" into your local repository.
Step 8: Create a new branch
      Rather than making changes to the project's "master" branch, it's a good practice to instead create your own branch.
      Use git checkout -b BRANCH_NAME to create a new branch and then immediately switch to it.
      For example, I used git checkout -b doc-fixes because I was making some small fixes to the documentation.
      Use git branch to show your local branches. 
Step 9: Make changes in your local repository
      Use a text editor or IDE to make the changes you planned to the files in your local repository.
Step 10: Commit your changes
      After you make a set of changes, use git add -A to stage your changes and git commit -m "DESCRIPTION OF CHANGES" to commit them.
      For example, I used git commit -m "fix typos in set_config docstring" for one of my commits.
Step 11: Push your changes to your fork
      When you are done making all of your changes, upload these changes to your fork using git push origin BRANCH_NAME.
      For example, I used git push origin doc-fixes.
Step 12: Begin the pull request
      Click the green Compare & pull request button to begin the pull request.
Step 13: Create the pull request
      after checking everything looking correct and as according to you.
      If everything looks good, click the green Create pull request button!
Step 14: Review the pull request.
      You have now created a pull request, which is stored in the project's repository (not in your fork of the repository).
Step 15: Add more commits to your pull request
      Start by returning to your local repository, and use git branch to see which branch is currently checked out.
Step 16: Delete your branch from your fork
      If the project maintainers accept your pull request (congratulations!), 
      they will merge your proposed changes into the project's master branch and close your pull request:
Step 17: Delete your branch from your local repository
      You should also delete the branch you created from your local repository, 
      so that you don't accidentally start working in it the next time you want to make a contribution to this project.
      delete the branch you created: git branch -D BRANCH_NAME. For example, I used git branch -D doc-fixes.
Step 18: Synchronize your fork with the project repository
      At this point, your fork is out of sync with the project repository's master branch.
      push those changes from your local repository to the "origin" (your fork): git push origin master.
Congratulations!
you have done your first contribution on open source.
     
